name: Release

on:
  push:
    branches:
      - main
    paths:
      - '__version__.py'  # Only trigger when version file changes
    tags:
      - 'v*'  # Also keep tag-based releases for manual control

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version comparison

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest

      - name: Extract version information
        id: version
        run: |
          # Get current version from __version__.py
          CURRENT_VERSION=$(python -c "from __version__ import __version__; print(__version__)")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Current version: $CURRENT_VERSION"

      - name: Check if release already exists
        id: check_release
        run: |
          # Check if a release with this version already exists
          TAG="v${{ steps.version.outputs.version }}"
          
          # Check if tag exists remotely
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists, skipping..."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist, proceeding..."
          fi

      - name: Extract changelog for this version
        id: changelog
        if: steps.check_release.outputs.exists == 'false'
        run: |
          # Extract the changelog section for this version
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create a temporary file for the changelog
          python << 'EOF'
          import re
          import sys
          
          version = "${{ steps.version.outputs.version }}"
          
          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()
              
              # Pattern to match version sections
              # Look for ## [version] - date format
              pattern = rf'## \[{re.escape(version)}\][^\n]*\n(.*?)(?=\n## \[|\n\n## |\Z)'
              match = re.search(pattern, content, re.DOTALL)
              
              if match:
                  changelog_text = match.group(1).strip()
                  # Write to a file that can be read by the next step
                  with open('current_changelog.md', 'w') as f:
                      f.write(changelog_text)
                  print(f"✅ Found changelog for version {version}")
              else:
                  # Fallback: create a simple changelog
                  fallback = f"## What's Changed\n\nSee [CHANGELOG.md](./CHANGELOG.md) for detailed changes in version {version}."
                  with open('current_changelog.md', 'w') as f:
                      f.write(fallback)
                  print(f"⚠️  No specific changelog found for version {version}, using fallback")
          
          except Exception as e:
              print(f"❌ Error extracting changelog: {e}")
              sys.exit(1)
          EOF

      - name: Create Git Tag
        if: steps.check_release.outputs.exists == 'false'
        run: |
          # Create the tag
          TAG="${{ steps.version.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: 'baseline-cli v${{ steps.version.outputs.version }}'
          body_path: current_changelog.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

      - name: Upload Release Assets
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./requirements.txt
          asset_name: requirements.txt
          asset_content_type: text/plain 